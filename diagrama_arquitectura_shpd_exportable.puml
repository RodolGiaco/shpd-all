@startuml SHPD_Architecture
!theme blueprint
title Sistema SHPD - Arquitectura Completa
footer Rodolfo Giacomodonatto - UTN FRM - Ingeniería Electrónica

' Definición de componentes
!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.4.0

' Componentes de Usuario
actor "Usuario/Paciente" as USER
component "Telegram App" as TELEGRAM #LightBlue
component "Navegador Web" as BROWSER #LightGreen

' Raspberry Pi
package "Raspberry Pi 3B+" #FFCCCC {
    component "Cámara USB/CSI" as CAMERA
    component "shpd-init.sh" as INIT
    component "Modo AP\nsetup_server.py" as AP_MODE
    component "Modo Cliente\ntest_websocket.py" as CLIENT_MODE
    database "shpd.conf" as CONFIG
}

' Clúster Kubernetes
package "Clúster Kubernetes (Kind)" #E6F3FF {
    
    ' Ingress
    component "Ingress-Nginx\nController" as INGRESS #Orange
    
    ' Backend
    package "Backend Pod" #LightYellow {
        component "backend-svc\n:8765/:30765" as BACKEND_SVC
        component "FastAPI\nmain.py" as FASTAPI
        component "PostureMonitor\nposture_monitor.py" as POSTURE_MON
        component "MediaPipe\nPose Detection" as MEDIAPIPE
        component "API Analysis\nWorker" as AI_WORKER
    }
    
    ' Frontend
    package "Frontend Pod" #LightCyan {
        component "frontend-svc\n:80/:30080" as FRONTEND_SVC
        component "React App\nTypeScript" as REACT
        component "Nginx Server" as NGINX
    }
    
    ' Bases de Datos
    package "Storage" #LightGray {
        database "PostgreSQL\n:5432" as POSTGRES {
            note right
                Tablas:
                - pacientes
                - sesiones
                - metricas_posturales
                - postura_counts
            end note
        }
        
        database "Redis\n:6379" as REDIS {
            note right
                Caché:
                - frames
                - contadores
                - calibración
            end note
        }
    }
    
    ' Bot Services
    package "Bot Services" #Lavender {
        component "Bot Telegram" as BOT
        component "api-bot\n:8000" as API_BOT
    }
}

' Servicios Externos
cloud "Servicios Externos" #FFFFCC {
    component "OpenAI API\nGPT-4 Vision" as OPENAI
    component "Telegram API\nBot Platform" as TELEGRAM_API
}

' CONEXIONES Y FLUJOS

' 1. Configuración inicial
USER ..> AP_MODE : "1. Configura WiFi"
AP_MODE ..> CONFIG : "2. Guarda config"
CONFIG ..> CLIENT_MODE : "3. Reinicia"

' 2. Captura de video
CAMERA --> INIT : "Video Stream\n30 FPS"
INIT --> CONFIG : "Detecta modo"
INIT --> AP_MODE : "Sin config"
INIT --> CLIENT_MODE : "Con config"

' 3. Streaming al backend
CLIENT_MODE --> BACKEND_SVC : "WebSocket\nJPEG frames\nws://.../video/input/{id}"

' 4. Procesamiento
BACKEND_SVC --> FASTAPI
FASTAPI --> POSTURE_MON
POSTURE_MON --> MEDIAPIPE : "Procesar frame"
MEDIAPIPE --> POSTURE_MON : "33 landmarks"
POSTURE_MON --> REDIS : "Métricas temp"
POSTURE_MON --> POSTGRES : "Persistencia"

' 5. Análisis IA
FASTAPI --> AI_WORKER : "Frame sample"
AI_WORKER --> OPENAI : "HTTPS\nBase64 image"
OPENAI --> AI_WORKER : "JSON análisis"
AI_WORKER --> API_BOT : "Reporte"

' 6. Frontend
BROWSER --> FRONTEND_SVC : "HTTP :30080"
FRONTEND_SVC --> NGINX
NGINX --> REACT
REACT <--> BACKEND_SVC : "WebSocket\n+ REST API"
BACKEND_SVC --> REACT : "Frames + data"

' 7. Notificaciones
USER --> TELEGRAM : "Comandos bot"
TELEGRAM --> TELEGRAM_API : "HTTPS"
TELEGRAM_API --> BOT : "Updates"
BOT --> POSTGRES : "Queries"
API_BOT --> BOT : "POST /send_report"
BOT --> TELEGRAM_API : "sendMessage"
TELEGRAM_API --> TELEGRAM : "Push"

' 8. Retroalimentación
POSTURE_MON --> API_BOT : "Alerta postura"
API_BOT --> BOT : "Trigger"
BOT --> TELEGRAM : "¡Corrige!"
TELEGRAM --> USER : "Notificación"
USER ..> CAMERA : "Ajusta postura"

' Base de datos
FASTAPI <--> POSTGRES : "SQLAlchemy"
FASTAPI <--> REDIS : "Redis-py"
BOT --> POSTGRES : "SQL"

' Ingress routing
INGRESS --> BACKEND_SVC : "/api"
INGRESS --> FRONTEND_SVC : "/"

legend right
    |= Protocolo |= Descripción |
    | WebSocket | Streaming de video en tiempo real |
    | HTTP/REST | API y contenido estático |
    | TCP | Conexiones a bases de datos |
    | HTTPS | APIs externas seguras |
    |<#FFCCCC> Hardware |
    |<#E6F3FF> Kubernetes |
    |<#FFFFCC> Externos |
endlegend

@enduml